#####################################################################
# 	Macros
#####################################################################
	 
[gcode_macro startWebcam]
gcode:
	RUN_SHELL_COMMAND CMD=startWebcam
	 
[gcode_macro cancel_delayed]
gcode:
	UPDATE_DELAYED_GCODE ID=print_end_delayed DURATION=0
	UPDATE_DELAYED_GCODE ID=print_end_countdown DURATION=0
   UPDATE_DELAYED_GCODE ID=heat_soak_countdown DURATION=0
   UPDATE_DELAYED_GCODE ID=heat_soak_end DURATION=0
	
[gcode_macro RAZ_ZOFFSET]
gcode:
    SET_GCODE_OFFSET Z=0.0
    
[gcode_macro VAR_ZOFFSET]
gcode:
    PRINTF MSG="{printer.gcode_move.homing_origin["z"]}"

[gcode_macro zoffset_check]
gcode:
    G1 X175 Y175 Z10 F18000
    G1 Z1 F6000
    G1 Z0.2 F100
	
[gcode_macro CONFIG]
variable_gantry_level: False
variable_heatsoak_total_duration: 30
variable_heatsoak_temp: 30
variable_heatsoak_current_duration: False
variable_heatsoak_endmacro: False
variable_heatsoak_finished: False
variable_print_parameters: {}
variable_print_cooldown: 0
variable_print_cooldown_beddelta: 0
variable_print_cooldown_chamberdelta: 0
gcode:
    {% if params.gantry_level %}
      SET_GCODE_VARIABLE MACRO=CONFIG VARIABLE=gantry_level VALUE={ params.gantry_level }
      PRINTF MSG="var gantry_level set"
    {% else %}
      PRINTF MSG="No parameter !"
    {% endif %}
    
[gcode_macro GET_CONFIG]   
gcode:
      PRINTF MSG="gantry_level: { printer["gcode_macro CONFIG"].gantry_level }"
      PRINTF MSG="heatsoak_total_duration: { printer["gcode_macro CONFIG"].heatsoak_total_duration}"
      PRINTF MSG="heatsoak_current_duration: { printer["gcode_macro CONFIG"].heatsoak_current_duration}"
      PRINTF MSG="heatsoak_endmacro: { printer["gcode_macro CONFIG"].heatsoak_endmacro}"
      PRINTF MSG="heatsoak_temp: { printer["gcode_macro CONFIG"].heatsoak_temp}"
      PRINTF MSG="print_cooldown: { printer["gcode_macro CONFIG"].print_cooldown}"
      PRINTF MSG="print_cooldown_beddelta: { printer["gcode_macro CONFIG"].print_cooldown_beddelta}"
      PRINTF MSG="print_cooldown_chamberdelta: { printer["gcode_macro CONFIG"].print_cooldown_chamberdelta}"
      PRINTF MSG="print_parameters: { printer["gcode_macro CONFIG"].print_parameters}"

    
[gcode_macro PRINTF]
gcode:
    M117 { params.MSG }
    RESPOND MSG='{ params.MSG }'

[gcode_macro park]
default_parameter_X: 40     #edit to your park position
default_parameter_Y: 350    #edit to your park position
default_parameter_Z: 10     #edit to your park position
default_parameter_E: 1      #edit to your retract length
gcode:
    M117 Parking
    SAVE_GCODE_STATE NAME=park
    
	#Check if extruder is hot for retracting
	{% if (printer.extruder.temperature + 5)  > printer["gcode_macro load"].extruder_target_temp %}
		#retract 
		G91
		G1 E-{E} F3600
	{% endif %} 
	G91
    G1 Z{Z}
	
    G90
    G1 X{X} Y{Y} F6000
    RESTORE_GCODE_STATE name=park
    M117 Parked
	
[gcode_macro maintenance]
default_parameter_X: 250     #edit to your maintenance position
default_parameter_Y: 10      #edit to your maintenance position
default_parameter_Z: 100     #edit to your maintenance position
default_parameter_E: 2       #edit to your retract length
gcode:
	# First, check if not printing
	{% if not printer.idle_timeout.state == "Printing" %} 
		# Second, check if the axes are homed.
		{% if "xyz" in printer.toolhead.homed_axes %}	
			SAVE_GCODE_STATE NAME=maintenance
			
			#Check if extruder is hot for retracting
			{% if (printer.extruder.temperature + 5)  > printer["gcode_macro load"].extruder_target_temp %}
				#retract 
				G91
				G1 E-{E} F3600
			{% endif %} 
			
			# go in maintenance pos
			G90
			G1 Z{Z} F3600
			G1 X{X} Y{Y} F8000
			RESTORE_GCODE_STATE name=maintenance
		{% endif %} 
	{% endif %} 
	
[delayed_gcode clear_display]
gcode:
  M117
  	

#[gcode_macro light_off]
# Control chamber LED, 0.0-10
#gcode:
#  set_pin pin=caselight value=0


#[gcode_macro light_on]
# Control chamber LED, 0.0-10
#default_parameter_S=10
#gcode:
#   set_pin pin=caselight value={S}





