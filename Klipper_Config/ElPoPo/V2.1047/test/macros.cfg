#####################################################################
#	Macros
#####################################################################
[delayed_gcode clear_display]
gcode:
  M117

[gcode_macro ACTIVATE_EXTRUDER]
#default_parameter_EXTRUDER: extruder
rename_existing: BASE_ACTIVATE_EXTRUDER
gcode:
#    BASE_ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28 XYZ
    QUAD_GANTRY_LEVEL
    G28 Z
 
[gcode_macro bed_mesh]
gcode:
    G32
    BED_MESH_CALIBRATE


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
default_parameter_E: 1      #edit to your retract length
gcode:
    M117 Pausing
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    park E={E}
    M117 Paused
	
[gcode_macro RESUME]
rename_existing: BASE_RESUME
default_parameter_E: 1      #edit to your retract length
gcode:
    M117 Resuming
    G91
    G1 E{E} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    M117 Printing

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    M117 Cancelling
    M104 S0
    M140 S0
    M106 S0
	
	TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    park
	
    M117 Cancelled
	UPDATE_DELAYED_GCODE ID=clear_display DURATION=5
	

[gcode_macro park]
default_parameter_E: 1      #edit to your retract length
gcode:

    {% set Park_x = printer["gcode_macro Printer_Variables"].park_position_x|float %}
    {% set Park_y = printer["gcode_macro Printer_Variables"].park_position_y|float %}
    {% set Park_z = printer["gcode_macro Printer_Variables"].park_position_z|float %}


    M117 Parking
    SAVE_GCODE_STATE NAME=park
    
	#Check if extruder is hot for retracting
	{% if (printer.extruder.temperature + 5)  > printer["gcode_macro load"].extruder_target_temp %}
		#retract 
		G91
		G1 E-{E} F3600
	{% endif %} 
	G91
    G1 Z{Park_z}
	
    G90
    G1 X{Park_x} Y{Park_y} F6000
    RESTORE_GCODE_STATE name=park
    M117 Parked

[gcode_macro maintenance]
default_parameter_E: 2       #edit to your retract length
gcode:
    {% set Maintenance_x = printer["gcode_macro Printer_Variables"].maintenance_position_x|float %}
    {% set Maintenance_y = printer["gcode_macro Printer_Variables"].maintenance_position_y|float %}
    {% set Maintenance_z = printer["gcode_macro Printer_Variables"].maintenance_position_z|float %}

	# First, check if not printing
	{% if not printer.idle_timeout.state == "Printing" %} 
		# Second, check if the axes are homed.
		{% if "xyz" in printer.toolhead.homed_axes %}	
			SAVE_GCODE_STATE NAME=maintenance
			
			#Check if extruder is hot for retracting
			{% if (printer.extruder.temperature + 5)  > printer["gcode_macro load"].extruder_target_temp %}
				#retract 
				G91
				G1 E-{E} F3600
			{% endif %} 
			
			# go in maintenance pos
			G90
			G1 Z{Maintenance_z} F3600
			G1 X{Maintenance_x} Y{Maintenance_y} F8000
			RESTORE_GCODE_STATE name=maintenance
		{% endif %} 
	{% endif %} 


# Filament change
[gcode_macro M600]
gcode:
    M117 Filament change
    PAUSE
	unload

[gcode_macro tip_shaping]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
	SAVE_GCODE_STATE NAME=tip_shaping
	# Filament tip shaping sequence
	M83 ;Relative extrusion
	G92 E0
	G1 E2 F3600
	G1 E-2 F3600
	G1 E3 F3600
	G1 E-3 F3600
	G1 E4 F3600
	G1 E-4 F3600

	
	G1 E-20 F3600                   ; Retract past heatbreak	
	RESTORE_GCODE_STATE name=tip_shaping

