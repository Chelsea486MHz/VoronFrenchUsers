#####################################################################
# Displays
#####################################################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB10, EXP1_3=PE14, EXP1_5=PE10, EXP1_7=PE8, EXP1_9=<GND>,
    EXP1_2=PE15, EXP1_4=PE12, EXP1_6=PE9,  EXP1_8=PE7, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PB14, EXP2_3=PC5,  EXP2_5=PC4,  EXP2_7=PB2,   EXP2_9=<GND>,
    EXP2_2=PB13, EXP2_4=PF11, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<GND>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi2"

[display]
# mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2
contrast: 63

[neopixel fysetc_mini12864]
# To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 1
initial_GREEN: 0.65
initial_BLUE: 0.0
color_order: RGB


######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.

[output_pin BEEPER_pin]
pin: EXP1_1
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.0024
#   PWM frequency : 0.001 = 1ms will give a base tone of 1kHz
#scale: 1000
#   PWM parameter will be in the range of (0-1000 Hz).
#   Although not pitch perfect.

[gcode_macro M300]
default_parameter_S: 440
#   Use a default LA-440Hz tone if S is omitted.
default_parameter_P: 100
#   Use a 100ms duration is P is omitted.
gcode:
    {% if S|float != 0 %}
        SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={1/S|float}
    {% endif %}
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0
	
[gcode_macro SOUND_FANFARE]
gcode:
    M300 S440 P100
    M300 S0 P50
    M300 S554 P100
    M300 S0 P50
    M300 S659 P100
    M300 S0 P50
    M300 S880 P250
    M300 S0 P50
    M300 S659 P75
    M300 S0 P75
    M300 S880 P450

[gcode_macro imperial_march]
gcode:
    M300 S440 P500
    M300 S0 P50
    M300 S440 P500
    M300 S0 P50
    M300 S440 P500
    M300 S0 P50
    M300 S349 P350
    M300 S0 P50
    M300 S523 P150
    M300 S0 P50
    M300 S440 P500
    M300 S0 P50
    M300 S349 P350
    M300 S0 P50
    M300 S523 P150
    M300 S0 P50
    M300 S440 P1000
    M300 S0 P50
    M300 S659 P500
    M300 S0 P50
    M300 S659 P500
    M300 S0 P50
    M300 S659 P500
    M300 S0 P50
    M300 S698 P350
    M300 S0 P50
    M300 S523 P150
    M300 S0 P50
    M300 S415 P500
    M300 S0 P50
    M300 S349 P350
    M300 S0 P50
    M300 S523 P150
    M300 S0 P50
    M300 S440 P1000
    M300 S0 P50
        
##	Set RGB values on boot up for each Neopixel. 
##	Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
   SET_LED LED=fysetc_mini12864 RED=1   GREEN=1   BLUE=1   INDEX=1 TRANSMIT=0
   SET_LED LED=fysetc_mini12864 RED=0.5 GREEN=0   BLUE=0   INDEX=2 TRANSMIT=0
   SET_LED LED=fysetc_mini12864 RED=0.5 GREEN=0   BLUE=0   INDEX=3
   #SOUND_FANFARE
	
[delayed_gcode clear_display]
gcode:
  M117


[display_glyph chamber]
data:
  ................
  ****************
  *....*....*....*
  *....*....*....*
  *....******....*
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...*......*...*
  ****************
  ................

[display_glyph voron]
data:
 ......***.......
 ....*******.....
 ...*********....
 .*************..
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 **..***..******.
 ******..***..**.
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 .*************..
 ...*********....
 ....*******.....
 ......***.......
 
 
 
[display_template _vheater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    #{% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
    {% if heater.target %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

#########################################################
# This section defines the actual chamber temp. field,
# replace 'temperature_sensor chamber' as necessary
#########################################################
#[display_data __voron_display chamber]
#position: 2, 0
#text:
#  {% set chamber = printer['temperature_sensor chamber'] %}
#	~chamber~
#	{ "%3.0f" % (chamber.temperature,) }
#	~degrees~

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "V2.643 " }
	~voron~
  {% endif %}

